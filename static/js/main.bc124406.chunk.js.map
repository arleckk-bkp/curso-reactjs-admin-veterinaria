{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","stateInicial","cita","mascota","dueno","fecha","hora","sintomas","error","NuevaCita","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","ListaCitas","citas","length","map","key","App","datos","idCita","console","log","filter","citasStorage","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAaeA,G,MAVA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACX,gCACI,wBAAIC,UAAU,eAAeD,M,imBCDrC,IAAME,EAAe,CACjBC,KAAO,CACLC,QAAU,GACVC,MAAQ,GACRC,MAAQ,GACRC,KAAO,GACPC,SAAW,IAEbC,OAAQ,GAqJGC,E,2MAjJXC,M,KACOT,G,EAIPU,aAAe,SAAAC,GAEX,EAAKC,SAAS,CACVX,KAAI,KACG,EAAKQ,MAAMR,KADd,eAECU,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,W,EAMvCC,aAAe,SAAAL,GACXA,EAAEM,iBADc,MAIkC,EAAKR,MAAMR,KAArDC,EAJQ,EAIRA,QAASC,EAJD,EAICA,MAAOC,EAJR,EAIQA,MAAOC,EAJf,EAIeA,KAAMC,EAJrB,EAIqBA,SAGrC,GAAe,KAAZJ,GAA4B,KAAVC,GAA0B,KAAVC,GAAyB,KAATC,GAA4B,KAAbC,EAApE,CAQA,IAAMY,EAAS,KAAO,EAAKT,MAAMR,MACjCiB,EAAUC,GAAKC,MAGf,EAAKC,MAAMC,eAAeJ,GAE1B,EAAKN,SAAL,KACOZ,SAdH,EAAKY,SAAS,CACVL,OAAO,K,wEAiBV,IAGEA,EAASgB,KAAKd,MAAdF,MAEP,OACI,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,+BAAd,iDAIEQ,EAAQ,yBAAKR,UAAU,4CAAf,qCAAoG,KAE9G,0BACIyB,SAAUD,KAAKP,cACf,yBAAKjB,UAAU,kBACX,2BAAOA,UAAU,oCAAjB,kBAGA,yBAAKA,UAAU,sBACX,2BACI0B,KAAK,OACL1B,UAAU,eACV2B,YAAY,iBACZZ,KAAK,UACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKC,YAbvC,IAkBI,yBAAKH,UAAU,kBACX,2BAAOA,UAAU,oCAAjB,mBAGA,yBAAKA,UAAU,sBACX,2BACI0B,KAAK,OACL1B,UAAU,eACV2B,YAAY,kBACZZ,KAAK,QACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKE,UA7BvC,IAkCI,yBAAKJ,UAAU,kBACX,2BAAOA,UAAU,oCAAjB,SAGA,yBAAKA,UAAU,qBACX,2BACI0B,KAAK,OACL1B,UAAU,eACVe,KAAK,QACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKG,SAG/B,2BAAOL,UAAU,oCAAjB,QAGA,yBAAKA,UAAU,qBACX,2BACI0B,KAAK,OACL1B,UAAU,eACVe,KAAK,OACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKI,SAxDvC,IA6DI,yBAAKN,UAAU,kBACX,2BAAOA,UAAU,oCAAjB,YAGA,yBAAKA,UAAU,sBACX,8BACQA,UAAU,eACVe,KAAK,WACLY,YAAY,wBACZC,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKK,aAvE3C,IA2EI,2BAAOmB,KAAK,SAAS1B,UAAU,sCAAsCgB,MAAM,8B,GApI3Ea,aCOTC,EAnBF,SAAC,GAA0B,IAAzB5B,EAAwB,EAAxBA,KAAM6B,EAAkB,EAAlBA,aACjB,OACI,yBAAK/B,UAAU,mCACX,yBAAKA,UAAU,eAAf,IAA8B,qCAAU,2BAAIE,EAAKC,WACjD,yBAAKH,UAAU,aACX,wBAAIA,UAAU,cAAd,aAAmCE,EAAKE,MAAxC,IAA+C,6BAA/C,WAA8DF,EAAKG,MAAnE,eAAsFH,EAAKI,MAC3F,uBAAGN,UAAU,aAAb,aAAoCE,EAAKK,UACzC,4BAAQmB,KAAK,SAAS1B,UAAU,iBAAiBgC,QAAS,kBAAMD,EAAa7B,EAAKkB,MAAlF,aCiBDa,EAvBI,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOH,EAAkB,EAAlBA,aACxB,OACI,yBAAK/B,UAAU,kBACX,yBAAKA,UAAU,aACVkC,EAAMC,OAAS,EACVD,EAAME,KAAI,SAAAlC,GAAI,OACZ,kBAAC,EAAD,CACImC,IAAOnC,EAAKkB,GACZlB,KAAQA,EACR6B,aAAgBA,OAEtB,wBAAI/B,UAAU,eAAd,+BC4DPsC,E,2MAnEb5B,MAAQ,CACNwB,MAAQ,I,EAkBVX,eAAiB,SAAAgB,GAEf,IAAML,EAAK,sBAAO,EAAKxB,MAAMwB,OAAlB,CAAyBK,IAGpC,EAAK1B,SAAS,CACVqB,W,EAKNH,aAAe,SAAAS,GACbC,QAAQC,IAAI,mBAAmBF,GAC/B,IAEMN,EAFa,YAAO,EAAKxB,MAAMwB,OAETS,QAAO,SAAAzC,GAAI,OAAIA,EAAKkB,KAAOoB,KAEvD,EAAK3B,SAAS,CACZqB,W,mFA/BF,IAAMU,EAAeC,aAAaC,QAAQ,SACtCF,GACFpB,KAAKX,SAAS,CACZqB,MAAQa,KAAKC,MAAMJ,O,2CAOvBC,aAAaI,QAAQ,QAASF,KAAKG,UAAU1B,KAAKd,MAAMwB,U,+BA2BxD,OACI,yBAAKlC,UAAU,aACX,kBAAC,EAAD,CAAQD,OAAS,wCACnB,yBAAKC,UAAU,OACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CACEuB,eAAkBC,KAAKD,mBAI7B,yBAAKvB,UAAU,OACX,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CACEkC,MAASV,KAAKd,MAAMwB,MACpBH,aAAgBP,KAAKO,sB,GA3DrBF,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bc124406.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => (\r\n    <header>\r\n        <h1 className=\"text-center\">{titulo}</h1>\r\n    </header>\r\n);\r\n\r\nHeader.propTypes = {\r\n    titulo : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst stateInicial = {\r\n    cita : {\r\n      mascota : '',\r\n      dueno : '',\r\n      fecha : '', \r\n      hora : '', \r\n      sintomas : ''\r\n    },\r\n    error : false\r\n}\r\n\r\nclass NuevaCita extends Component {\r\n    state = {\r\n        ...stateInicial\r\n    }\r\n\r\n    //cuando el usuario escribe en los inputs\r\n    handleChange = e => {\r\n        //console.log(\"estas escribiendo en \"+e.target.name+' '+e.target.value);\r\n        this.setState({\r\n            cita : {\r\n                ...this.state.cita,\r\n                [e.target.name] : e.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    //cuando el usuario da clic para enviar el formulario\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        //extraer los valores del state \r\n        const { mascota, dueno, fecha, hora, sintomas } = this.state.cita;\r\n\r\n        //validar que todos los campos esten llenos\r\n        if(mascota === '' || dueno === '' || fecha === '' || hora === '' || sintomas === '') {\r\n            this.setState({\r\n                error: true\r\n            });\r\n            return;\r\n        }\r\n\r\n        //generar objeto\r\n        const nuevaCita = {...this.state.cita};\r\n        nuevaCita.id = uuid();\r\n\r\n        //if OK agregar la cita al API\r\n        this.props.crearNuevaCita(nuevaCita);\r\n\r\n        this.setState({\r\n            ...stateInicial\r\n        });\r\n    }\r\n\r\n    render() { \r\n\r\n        //extraer valor del state\r\n        const {error} = this.state;\r\n\r\n        return ( \r\n            <div className=\"card mt-5 py-5\">\r\n                <div className=\"card-body\">\r\n                    <h2 className=\"card-title text-center mb-5\">\r\n                        Llena el formulario para crear una nueva cita\r\n                    </h2>\r\n\r\n                    { error ? <div className=\"alert alert-danger mt-2 mb-5 text-center\">Todos los campos son obligatorios</div> : null }\r\n\r\n                    <form\r\n                        onSubmit={this.handleSubmit}>\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                                Nombre Mascota\r\n                            </label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <input \r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Nombre Mascota\"\r\n                                    name=\"mascota\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.mascota}\r\n                                />\r\n                            </div> \r\n                        </div> {/* form group row nombre mascota */}\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                                Nombre Due&ntilde;o\r\n                            </label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <input \r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Nombre Due&ntilde;o\"\r\n                                    name=\"dueno\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.dueno}\r\n                                />\r\n                            </div> \r\n                        </div> {/* form group row nombre due√±o */}\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                                Fecha\r\n                            </label>\r\n                            <div className=\"col-sm-4 col-lg-4\">\r\n                                <input \r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"fecha\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.fecha}\r\n                                />\r\n                            </div> \r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                                Hora\r\n                            </label>\r\n                            <div className=\"col-sm-4 col-lg-4\">\r\n                                <input \r\n                                    type=\"time\"\r\n                                    className=\"form-control\"\r\n                                    name=\"hora\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.hora}\r\n                                />\r\n                            </div> \r\n                        </div> {/* form group row fecha y hora */}\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                                Sintomas\r\n                            </label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <textarea \r\n                                        className=\"form-control\"\r\n                                        name=\"sintomas\" \r\n                                        placeholder=\"Describe los sintomas\" \r\n                                        onChange={this.handleChange}\r\n                                        value={this.state.cita.sintomas} />\r\n                            </div> \r\n                        </div> {/* form group row nombre due√±o */}\r\n\r\n                        <input type=\"submit\" className=\"py-3 mt-2 btn btn-success btn-block\" value=\"Agregar Nueva Cita\" />\r\n\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nNuevaCita.propTypes = {\r\n    crearNuevaCita : PropTypes.func.isRequired\r\n}\r\n\r\nexport default NuevaCita;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n    return ( \r\n        <div className=\"card text-white bg-primary mb-3\">\r\n            <div className=\"card-header\"> <h3>Cita: <b>{cita.mascota}</b></h3></div>\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title\">Due√±o: {cita.dueno} <br /> Fecha: {cita.fecha}&emsp;Hora: {cita.hora}</h4>\r\n                <p className=\"card-text\">Sintomas: {cita.sintomas}</p>\r\n                <button type=\"button\" className=\"btn btn-danger\" onClick={() => eliminarCita(cita.id)}>Borrar</button>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nCita.propTypes = {\r\n    cita : PropTypes.object.isRequired,\r\n    eliminarCita : PropTypes.func.isRequired\r\n}\r\n \r\nexport default Cita;","import React from 'react';\r\nimport Cita from './Cita';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListaCitas = ({citas, eliminarCita}) => {\r\n    return ( \r\n        <div className=\"card mt-5 py-5\">\r\n            <div className=\"card-body\">\r\n                {citas.length > 0 \r\n                    ? citas.map(cita => (\r\n                        <Cita \r\n                            key = {cita.id}\r\n                            cita = {cita} \r\n                            eliminarCita = {eliminarCita} />\r\n                        ))\r\n                    : <h3 className=\"text-center\">No hay citas disponibles</h3> //si no hay citas mostrar texto\r\n                }\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nListaCitas.propTypes = {\r\n    citas : PropTypes.array.isRequired,\r\n    eliminarCita : PropTypes.func.isRequired\r\n}\r\n\r\nexport default ListaCitas;","import React, {Component} from 'react';\nimport './static/css/bootstrap.min.css';\nimport Header from './components/Header';\nimport NuevaCita from './components/NuevaCita';\nimport ListaCitas from './components/ListaCitas';\n\nclass App extends Component {\n  \n  state = {\n    citas : []\n  }\n\n  //cuando la aplicaci√≥n carga\n  componentDidMount() {\n    const citasStorage = localStorage.getItem('citas');\n    if (citasStorage) {\n      this.setState({\n        citas : JSON.parse(citasStorage)\n      })\n    }\n  }\n\n  //al eliminar o agregar una nueva cita\n  componentDidUpdate() {\n    localStorage.setItem('citas', JSON.stringify(this.state.citas));\n  }\n\n  crearNuevaCita = datos => {\n    //copiar state actual\n    const citas = [...this.state.citas, datos];\n\n    //agregar al state\n    this.setState({\n        citas\n    });\n  }\n\n  //eliminar citas del state\n  eliminarCita = idCita => {\n    console.log(\"cita a eliminar \"+idCita);\n    const citasActuales = [...this.state.citas];\n\n    const citas = citasActuales.filter(cita => cita.id !== idCita);\n\n    this.setState({\n      citas\n    });\n\n  }\n\n  render() {\n    return(\n        <div className=\"container\">\n            <Header titulo = \"Administrador pacientes veterinaria\"/>\n          <div className=\"row\">\n            <div className=\"col-md-10 mx-auto\">\n              <NuevaCita \n                crearNuevaCita = {this.crearNuevaCita} />\n            </div>\n          </div>\n          \n          <div className=\"row\">\n              <div className=\"col-md-10 mx-auto\">\n                <ListaCitas\n                  citas = {this.state.citas}\n                  eliminarCita = {this.eliminarCita} />\n              </div>\n          </div>\n\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}